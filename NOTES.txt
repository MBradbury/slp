This file contains some important notes that it is useful to be aware of.


=Message Size=

The default maximum message size is fixed as a compile-time macro.

TOSSIM will calculate something based on the length of a message, irrespective of
the compile-time maximum size. So if a message size changes size, do not expect
a simulation seed to produce the same results.

=Field Order in messages=

Make sure to order the fields in your messages in order of decreasing size.
Certain CPUs are unable to access words at odd memory locations.
For example:

nx_struct S1 { nx_uint8_t a; nx_uint32_t b; };

a will be located at an even memory address and b will be at an odd one.
MSP430 CPUs will fail to read the value of b because it needs to be on
an even memory address. Because this is an nx_struct it is packed and no padding
bytes will be added.

=Proactive Attackers=

Currently proactive attackers that schedule the attacker to do something at a
specific time has a bug. The attacker model causes different results when comparing
an attacker who does nothing and an attacker who does nothing and schedules an
event every second. It is expected that these two models should produce the same
result.

See: https://github.com/tinyos/tinyos-main/issues/419

=PrintfClient=

See http://comments.gmane.org/gmane.os.tinyos.users/41337 for instructions to build the dependencies for PrintfClient.

As the page is now unavailable, this is the description provided by András Bíró <andras.biro <at> unicomp.hu> at 2012-04-18 08:14:10 GMT
Expect to make further changes depending on your Java set up

-go to /tools/tinyos/java/env
-compile getenv:
gcc "-I$(JDK)/include/linux" "-I$(JDK)/include" -shared -fpic net_tinyos_util_Env.c -o libgetenv.so
-go to /tools/tinyos/java/serial
-compile toscomm:
gcc -O1 -shared -fPIC "-I$(JDK)/include" "-I$(JDK)/include/linux" NativeSerial_linux.cpp -o libtoscomm.so
(you could probably also use -O2 -s on both of these commands to
reduce to size of the libs, but these are the original commands from
the Makefile)
-copy both .so files where your JRE can see them (e.g. on my computer
it's /opt/java/jre/lib/amd64)

=TinyOS Contrib=

There has been much work on TinyOS over the years. The following is a link to a repository of previous work:

https://github.com/tyll/tinyos-2.x-contrib

=Testbeds=

==DCSWarwick==

==Indriya==

Stores

==IoT-Lab==
